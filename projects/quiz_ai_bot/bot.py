import json
import random
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

# Load questions from JSON
with open('questions.json') as f:
    questions = json.load(f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quiz Bot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /algoquiz –∏–ª–∏ /guess_techno –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )

async def algoquiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send algorithm complexity quiz question as a poll"""
    question = random.choice(questions['algorithm_questions'])
    options = [f"{chr(65+i)}) {opt}" for i, opt in enumerate(question['options'])]
    correct_option = ord(question['correct']) - 65  # Convert A=0, B=1, etc.
    
    await context.bot.send_poll(
        chat_id=update.effective_chat.id,
        question=f"–ö–∞–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É:\n{question['description']}",
        options=options,
        type="quiz",
        correct_option_id=correct_option,
        is_anonymous=False,
        explanation=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct']}) {question['options'][correct_option]}"
    )

async def guess_techno(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send technology description for guessing"""
    question = random.choice(questions['technology_questions'])
    sent_message = await update.message.reply_text(
        f"–£–≥–∞–¥–∞–π—Ç–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é (—É –≤–∞—Å 3 –ø–æ–ø—ã—Ç–∫–∏):\n\n{question['description']}"
    )
    context.user_data['current_question'] = {
        'correct_technology': question['technology'],
        'attempts_left': 3,
        'message_id': sent_message.message_id  # Store the sent message's ID
    }
    if 'accepted_answers' in question:
        context.user_data['current_question']['accepted_answers'] = question['accepted_answers']

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Check user's answer to technology guessing questions"""
    if 'current_question' not in context.user_data:
        return
        
    # Get the reply info if available
    reply_to = getattr(update.message, 'reply_to_message', None)
    if not reply_to or reply_to.message_id != context.user_data['current_question']['message_id']:
        return
        
    user_guess = update.message.text.lower()
    correct = context.user_data['current_question']['correct_technology'].lower()
    accepted_answers = [a.lower() for a in context.user_data['current_question'].get('accepted_answers', [])]
    
    if user_guess == correct or user_guess in accepted_answers:
        try:
            await context.bot.set_message_reaction(
                chat_id=update.message.chat.id,
                message_id=update.message.message_id,
                reaction=["üéâ"]
            )
        except Exception as e:
            print(f"Error setting reaction: {e}")
        del context.user_data['current_question']
    else:
        context.user_data['current_question']['attempts_left'] -= 1
        if context.user_data['current_question']['attempts_left'] > 0:
            try:
                await context.bot.set_message_reaction(
                    chat_id=update.message.chat.id,
                    message_id=update.message.message_id,
                    reaction=["üëé"]
                )
            except Exception as e:
                print(f"Error setting reaction: {e}")
        else:
            try:
                await context.bot.set_message_reaction(
                    chat_id=update.message.chat.id,
                    message_id=update.message.message_id,
                    reaction=["ü§°"]
                )
                await update.message.reply_text(
                    f"–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}."
                )
                del context.user_data['current_question']
            except Exception as e:
                print(f"Error setting reaction: {e}")

def main():
    # Create application with post_init callback
    async def post_init(application):
        commands = [
            ("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
            ("algoquiz", "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"),
            ("guess_techno", "–£–≥–∞–¥–∞–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é")
        ]
        await application.bot.set_my_commands(commands)
    
    app = Application.builder() \
        .token(os.getenv("TELEGRAM_BOT_TOKEN")) \
        .post_init(post_init) \
        .build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("algoquiz", algoquiz))
    app.add_handler(CommandHandler("guess_techno", guess_techno))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    
    app.run_polling()

if __name__ == "__main__":
    main()